{"version":3,"sources":["Components/card-list/card.component.jsx","Components/card/card-list.component.jsx","Components/Search-BoxComponent/Search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","a","fetch","data","json","jsonData","this","setState","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mWAGaA,EAAO,SAACC,GACjB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,aAAuDC,IAAI,KACnE,6BAAKL,EAAMG,QAAQG,OACnB,6BAAKN,EAAMG,QAAQI,YCHlBC,EAAW,SAACR,GACrB,OACI,qBAAKC,UAAW,YAAhB,SACKD,EAAMS,SAASC,KAAI,SAACP,GAAD,OAChB,cAAC,EAAD,CAAMA,QAASA,GAAcA,EAAQC,UCNxCO,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAcC,EAAhB,EAAgBA,aAAhB,OACrB,uBACIZ,UAAY,SACZa,KAAK,SACLF,YAAcA,EACdG,SAAUF,MCkCHG,E,kDApCb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXR,SAAU,GACVS,YAAa,IALH,E,4FASd,8BAAAC,EAAA,sEACqBC,MAAM,8CAD3B,cACQC,EADR,gBAEyBA,EAAKC,OAF9B,OAEQC,EAFR,OAGEC,KAAKC,SAAS,CAAEhB,SAAUc,IAH5B,gD,0EAMA,WAAU,IAAD,SAC2BC,KAAKP,MAA/BR,EADD,EACCA,SAAUS,EADX,EACWA,YACZQ,EAAmBjB,EAASkB,QAAO,SAACxB,GAAD,OACvCA,EAAQG,KAAKsB,cAAcC,SAASX,EAAYU,kBAGlD,OACE,sBAAK3B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEW,YAAY,iBACZC,aAAc,SAACiB,GACb,EAAKL,SAAS,CAAEP,YAAaY,EAAEC,OAAOC,WAG1C,cAAC,EAAD,CAAUvB,SAAUiB,W,GA/BVO,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f5149657.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.style.css'\r\n\r\nexport const Card = (props) => {\r\n    return (\r\n        <div className='card-container'>\r\n            <img src={`https://robohash.org/${props.monster.id}?set=set2`} alt=\"\" />\r\n            <h2>{props.monster.name}</h2>\r\n            <h4>{props.monster.email}</h4>\r\n        </div>\r\n    )\r\n};\r\n","import React from 'react';\r\nimport './card-list.styles.css'\r\nimport {Card} from '../card-list/card.component'\r\n\r\n\r\nexport const CardList = (props) => {\r\n    return (\r\n        <div className= 'card-list'>\r\n            {props.monsters.map((monster) => (\r\n                <Card monster={monster} key={monster.id}/>\r\n            ))}\r\n        </div>\r\n    )\r\n};\r\n","import React from 'react';\r\nimport './search-box.style.css';\r\n \r\nexport const SearchBox = ({placeholder , handleChange}) => (\r\n    <input \r\n        className = 'search'\r\n        type=\"search\"\r\n        placeholder= {placeholder}\r\n        onChange={handleChange}\r\n    />\r\n);\r\n\r\n","import \"./App.css\";\nimport { Component } from \"react\";\nimport { CardList } from \"./Components/card/card-list.component.jsx\";\nimport { SearchBox } from \"./Components/Search-BoxComponent/Search-box.component.jsx\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n    };\n  }\n\n  async componentDidMount() {\n    const data = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n    const jsonData = await data.json();\n    this.setState({ monsters: jsonData });\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Monster Rolordex</h1>\n        <SearchBox\n          placeholder=\"Search Monster\"\n          handleChange={(e) => {\n            this.setState({ searchField: e.target.value });\n          }}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}